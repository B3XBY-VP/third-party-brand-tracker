
## 🔑 Features

### 🔒 Authentication

- **Admin Login**: Users must enter a password (**marketing123**) to access the Admin Panel.
- **Session Storage**: The session remains active unless the user logs out or closes the browser.

### 🎯 Admin Panel (`index.html + admin.js`)

- **Campaign Form**: Add a campaign (brand, sale month, name, type, location, dates, notes, and an image).
- **Inline Editing**: Edit campaigns directly in the table.
- **Base64 Image Upload**: Upload an image that’s stored in Firestore or as a Base64 string.
- **Delete Functionality**: Remove a campaign from Firestore.
- **Year Selector**: Switch between years to manage campaigns efficiently.
- **Loading Spinner** and **Toast Messages** for user feedback (saving, errors, etc.).

### 📊 Dashboard (`dashboard.html + dashboard.js`)

- **Real-Time Firestore Sync**: Campaign data is fetched from Firestore collections (`campaigns_YEAR`).
- **Search**: Filter campaigns by brand name or campaign name.
- **Pagination**: Navigate large datasets page by page.
- **Filter Campaigns**: Filter further by brand and month (checkboxes).
- **Sort Table**: Click column headers to sort.
- **Draggable Rows**: Rearrange campaigns with drag-and-drop (SortableJS).
- **Export PDF**: Generate a PDF summary of brand appearances (html2canvas + jsPDF).
- **Modal Image Preview**: Click images to enlarge them.
- **Campaign Summary**: Displays brand frequency by quarter.

## 🚀 Setup & Usage

### 1️⃣ Running the Project

- Since it’s a **static web app**, you can run by opening **`index.html`** in a browser.  
- For **Firestore** connectivity, ensure you have **`firebaseSync.js`** set up with your Firebase config and an **internet connection**.  
- Alternatively, serve the files via a local HTTP server (like `python -m http.server`), then open in your browser.

### 2️⃣ Logging In

- Navigate to **`login.html`** (or load **`index.html`** which may redirect).
- Enter the password `marketing123`.
- After successful login, the session is stored until you log out or close the browser.

### 3️⃣ Managing Campaigns (Admin Panel)

- Add a campaign with the form (brand, date range, image, etc.).
- Edit campaigns inline by clicking the edit button.
- Delete if needed.
- Switch between years using the selector at the top.

### 4️⃣ Viewing the Dashboard

- Click **“View Dashboard”** in the Admin Panel.
- Apply **search** or brand/month filters to narrow campaigns.
- **Sort** columns by clicking headers.
- **Drag** rows to reorder if desired.
- **Export** brand summaries to PDF.

### 5️⃣ Logging Out

- Click the profile icon → “Log out” to return to `login.html`.

## 🛠️ Technical Details

### ✅ Firestore Usage

- Campaign data is stored in **Firebase Firestore** (collections named `campaigns_YEAR`).
- This enables **multi-device real-time sync**. Multiple users see updates as they happen.

### ✅ JavaScript Libraries Used

- **Firebase Firestore** for real-time data
- **SortableJS** for drag-and-drop table row reordering
- **html2canvas & jsPDF** for PDF export
- **(Optional)** Filson Soft / Source Sans Pro for brand typography

### ✅ Security Considerations

- Basic session handling via `sessionStorage`.
- Firestore requires valid API keys and security rules if you want to restrict access.  
- This project is otherwise frontend-only, so no sensitive backend logic.

### 📌 Possible Future Enhancements

- **Authentication System**: Replace the simple password with full Firebase Auth or another provider.
- **Advanced User Roles**: Different access levels for marketing teams, read-only vs. admin, etc.
- **Additional Analytics**: Visualize engagement data with charts or dashboards in the UI.
- **Offline Support**: Use Firestore’s offline persistence for editing while disconnected.

## 📝 Credits

Developed by **Jack Jones** for marketing and brand management at **Victorian Plumbing**.  
Now enhanced with **Firestore** for real-time multi-user collaboration. 
